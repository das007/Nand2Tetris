// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=AluOut,sel=instruction[15],out=ALUorINSTRUCT);

    // Set load bit of A Reg when
    //      Case 1: Instruction type A -> instruction[15]==0
    //      Case 2: Instruction type C -> instruction[5]==1
    // if(instruction[15]==0)
    // {
    //     loadA = 1
    // }
    // else
    // {
    //     loadA = instruction[5]
    // }
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadA);
    ARegister(in=ALUorINSTRUCT ,load=loadA ,out=ARegOut, out[0..14]=addressM); // A Register --------------> addressM

    // if(instruction Type A)
    // {
    //      ALU Input A = ARegOut
    // }
    // else
    // {
    //      if(instruction[12] == 0) then ALU Input A = ARegOut
    //      else ALU Input A = inM
    // }
    And(a=instruction[15], b=instruction[12], out=loadAorM);
    Mux16(a=ARegOut,b=inM,sel=loadAorM,out=aluInputY);

    // 4th bit of instruction type C decides whether the AluOut is loaded in D Register
    // if(instruction type A)
    // {
        // loadD = 0
    // }
    // else if (instruction type C)
    // {
        // loadD = instruction[4]
    // }
    Mux(a=false,b=instruction[4],sel=instruction[15],out=loadD);
    DRegister(in=AluOut ,load=loadD ,out=aluInputX ); // D Register

///////////////////////////////////////////////
// Logic to set the LOAD and INC bits of PC //
/*
    J1 | J2 | J3 | effect | performJMP
   ==========================================
     0 |  0 |  0 | no JMP | false 
     0 |  0 |  1 |    JGT | (zr OR ng) == 0 
     0 |  1 |  0 |    JEQ | zr 
     0 |  1 |  1 |    JGE | !ng 
     1 |  0 |  0 |    JLT | ng 
     1 |  0 |  1 |    JNE | !zr 
     1 |  1 |  1 |    JLE | (zr OR ng) == 1 
     1 |  1 |  1 |    JMP | true 
*/
    Or(a=zr, b=ng, out=zrORng);
    Not(in=zrORng, out=NOTzrORng);
    Not(in=zr, out=NOTzr);
    Not(in=ng, out=NOTng);
    Mux8Way16(a[0]=false, b[0]=NOTzrORng, c[0]=zr, d[0]=NOTng, e[0]=ng, f[0]=NOTzr, g[0]=zrORng, h[0]=true, sel[2]=instruction[2], sel[1]=instruction[1], sel[0]=instruction[0], out[0]=performJMP);
    
    // Not(in=performJMP, out=notPerformJMP);
    // Mux(a=true, b=notPerformJMP, sel=instruction[15], out=incPC);
    Mux(a=false, b=performJMP, sel=instruction[15], out=loadPC);

    // PC(in=ARegOut ,load=loadPC ,inc=incPC ,reset=reset ,out[0..14]=pc); //  --------------> PC
    PC(in=ARegOut ,load=loadPC ,inc=true ,reset=reset ,out[0..14]=pc); //  --------------> PC
///////////////////////////////////////////////

    ALU(x=aluInputX ,y=aluInputY ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=AluOut, out=outM ,zr=zr ,ng=ng); //  --------------> outM

    // if(instruction type A)
    // {
        // writeM = 0
    // }
    // else if (instruction type C)
    // {
        // writeM = instruction[3]
    // }
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM); //  --------------> writeM
}